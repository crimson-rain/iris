/* FILENAME: llm/dialogue.rs
 * 
 * DESCRIPTION 
 * Struct for Transforming JSON Dialogue which is Generated by Ollama into a Rust Struct
 * for further processing.
 * 
 * NOTES
 * Perhaps we return the Dialogue Object instead of Generation Response?
 * 
 * AUTHOR:    Rezwan Rahman  (RAH22529097)
 * CREATED:   14/11/2024
 * MODIFIED:  18/01/2025
 * 
 */

use serde::{Serialize, Deserialize};
use crate::error::Error;

#[derive(Debug, Serialize, Deserialize)]
pub struct Dialogue {
    pub dialogue: String,
    pub npc: String,
    pub choices: Vec<String>
}

// TODO: Implement Dialogue and Verify
impl TryFrom<&str> for Dialogue {
    type Error = Error;

    fn try_from(data: &str) -> Result<Self, Self::Error> {
        serde_json::from_str::<Dialogue>(&data).map_err(Error::FailedToSerialize)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn serialize_dialogue_test() {
        let data = r#"
        {
            "dialogue": "Welcome, traveller! What brings you to our village?",
            "npc": "Elder Rowan",
            "choices": [
                "I'm just passing through.",
                "I'm looking for someone.",
                "Can you tell me more about this place?"
            ]
        }
        "#;

        let dialogue = Dialogue::try_from(data).expect("Failed to Deserialize Dialogue");

        assert_eq!(dialogue.dialogue, "Welcome, traveller! What brings you to our village?");
        assert_eq!(dialogue.npc, "Elder Rowan");
        assert_eq!(dialogue.choices, vec!["I'm just passing through.", "I'm looking for someone.", "Can you tell me more about this place?"]);
    }

    #[should_panic(expected = "missing field `npc`")]
    #[test]
    fn fail_to_serialize_test() {
        let data = r#"
        {
            "dialogue": "Welcome, traveller! What brings you to our village?"
        }
        "#;

        let _ = Dialogue::try_from(data).unwrap();
    }
}